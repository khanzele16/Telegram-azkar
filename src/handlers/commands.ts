import { register } from "../database/controllers/auth";
import User from "../database/models/User";
import { toMenuKeyboard } from "../shared/keyboards";
import { type MyContext } from "../types";
import { menuButtons } from "./menu";

export const start = async (ctx: MyContext) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    const isRegistered: Boolean = await register(ctx);
    if (isRegistered) {
      await menu(ctx);
    } else {
      await ctx.conversation.enter("startConversation");
    }
  } catch (error) {
    console.error("Error in start command:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

export const menu = async (ctx: MyContext) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
      );
      return;
    }
    if (!user.location?.latitude || !user.location?.longitude) {
      await ctx.reply("–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
      await ctx.conversation.enter("locationConversation");
      return;
    }
    await ctx.reply("üìå <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", {
      reply_markup: menuButtons,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("Error in menu command:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

export const help = async (ctx: MyContext, withKeyboard?: boolean) => {
  try {
    if (withKeyboard === true) {
      await ctx.reply(
        "<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Ç–æ –ø–∏—à–∏—Ç–µ @khanzele",
        { parse_mode: "HTML", reply_markup: toMenuKeyboard }
      );
      return;
    }
    await ctx.reply(
      "<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Ç–æ –ø–∏—à–∏—Ç–µ @khanzele",
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.error("Error in help command:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.");
  }
};
