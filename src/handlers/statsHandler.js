"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.statsHandler = statsHandler;
exports.handleCalendarNavigation = handleCalendarNavigation;
const streakService_1 = require("../services/streakService");
const CalendarService_1 = require("../services/CalendarService");
const User_1 = __importDefault(require("../database/models/User"));
const grammy_1 = require("grammy");
const dayjs_1 = __importDefault(require("dayjs"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
dayjs_1.default.extend(utc_1.default);
function statsHandler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        try {
            if (!((_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id)) {
                yield ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return;
            }
            const user = yield User_1.default.findOne({ telegramId: ctx.from.id });
            if (!user) {
                yield ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
                return;
            }
            const stats = yield streakService_1.StreakService.getProfileStats(user._id);
            const now = dayjs_1.default.utc();
            const currentYear = now.year();
            const currentMonth = now.month() + 1;
            const calendar = yield CalendarService_1.CalendarService.getMonthCalendar(user._id, currentYear, currentMonth);
            const statsMessage = formatProfileStats(stats);
            const calendarMessage = formatCalendar(calendar, currentYear, currentMonth);
            const keyboard = createCalendarKeyboard(currentYear, currentMonth);
            yield ctx.reply(`${statsMessage}\n\n${calendarMessage}`, {
                reply_markup: keyboard,
                parse_mode: "HTML"
            });
        }
        catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ statsHandler:", error);
            yield ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        }
    });
}
function handleCalendarNavigation(ctx, year, month) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        try {
            if (!((_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id)) {
                yield ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return;
            }
            const user = yield User_1.default.findOne({ telegramId: ctx.from.id });
            if (!user) {
                yield ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            const calendar = yield CalendarService_1.CalendarService.getMonthCalendar(user._id, year, month);
            const calendarMessage = formatCalendar(calendar, year, month);
            const keyboard = createCalendarKeyboard(year, month);
            yield ctx.editMessageText(`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n${calendarMessage}`, {
                reply_markup: keyboard,
                parse_mode: "HTML"
            });
            yield ctx.answerCallbackQuery(`üìÖ ${getMonthName(month)} ${year}`);
        }
        catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ handleCalendarNavigation:", error);
            yield ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
        }
    });
}
function formatProfileStats(stats) {
    let message = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n";
    message += `üî• <b>–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫:</b> ${stats.currentStreak} –¥–Ω–µ–π\n\n`;
    if (stats.lastReadAt) {
        const lastRead = dayjs_1.default.utc(stats.lastReadAt).format("DD.MM.YYYY HH:mm");
        message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:</b> ${lastRead}\n\n`;
    }
    else {
        message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:</b> –ù–∏–∫–æ–≥–¥–∞\n\n`;
    }
    message += `üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    message += `   ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–Ω–µ–π: ${stats.totalReadDays}\n`;
    message += `   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: ${stats.totalSkippedDays}\n\n`;
    return message;
}
function formatCalendar(calendar, year, month) {
    let message = `<b>üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å ${getMonthName(month)} ${year}</b>\n\n`;
    const weeks = [];
    let currentWeek = [];
    calendar.forEach((day, index) => {
        currentWeek.push(day);
        const dayOfWeek = dayjs_1.default.utc(day.date).day();
        if (dayOfWeek === 0 || index === calendar.length - 1) {
            weeks.push([...currentWeek]);
            currentWeek = [];
        }
    });
    weeks.forEach((week, weekIndex) => {
        message += `–ù–µ–¥–µ–ª—è ${weekIndex + 1}:\n`;
        week.forEach(day => {
            const dayNumber = dayjs_1.default.utc(day.date).date();
            const statusEmoji = getStatusEmoji(day.status);
            message += `${statusEmoji} ${dayNumber.toString().padStart(2, '0')} `;
        });
        message += "\n\n";
    });
    return message;
}
function createCalendarKeyboard(year, month) {
    const keyboard = new grammy_1.InlineKeyboard();
    const prevMonth = month === 1 ? 12 : month - 1;
    const prevYear = month === 1 ? year - 1 : year;
    const nextMonth = month === 12 ? 1 : month + 1;
    const nextYear = month === 12 ? year + 1 : year;
    keyboard
        .text("‚è™", `calendar:${prevYear}:${prevMonth}`)
        .text(`${getMonthName(month)} ${year}`, `calendar:info`)
        .text("‚è©", `calendar:${nextYear}:${nextMonth}`)
        .row()
        .text("üìä –û–±–Ω–æ–≤–∏—Ç—å", `calendar:${year}:${month}`);
    return keyboard;
}
function getMonthName(month) {
    const months = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ];
    return months[month - 1];
}
function getStatusEmoji(status) {
    switch (status) {
        case "read":
            return "‚úÖ";
        case "skipped":
            return "‚ùå";
        case "postponed":
            return "‚è∞";
        case "pending":
            return "‚è≥";
        default:
            return "‚ö™";
    }
}
