import User from "../database/models/User";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import dayjs from "dayjs";
import {
  locationKeyboard,
  startKeyboard,
  toMenuKeyboard,
} from "../shared/keyboards";
import { getPrayTime } from "../shared/requests";
import { IPrayTime, MyConversation, MyConversationContext } from "../types";
import { updatePrayerTimesAndSchedule } from "../cron/prayerTimesCron";
import { menu } from "./commands";

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.locale("ru");

export const startConversation = async (
  conversation: MyConversation,
  ctx: MyConversationContext
): Promise<void> => {
  const ctx_message = await ctx.reply(
    "<b>–ê—Å—Å–∞–ª—è–º—É –ê–ª–µ–π–∫—É–º –≤–∞ –†–∞—Ö–º–∞—Ç—É–ª–ª–∞—Ö–∏ –≤–∞ –ë–∞—Ä–∞–∫–∞—Ç—Éh!</b>\n\n" +
      "–ú–∏—Ä, –º–∏–ª–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ê–ª–ª–∞—Ö–∞ –¥–∞ –±—É–¥—É—Ç —Å –≤–∞–º–∏.\n" +
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –∞–∑–∫–∞—Ä–∞–º–∏ üåø\n\n" +
      "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –∞–∑–∫–∞—Ä—ã, –¥—É–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –∞–∑–∫–∞—Ä—ã –ø–æ—Å–ª–µ –Ω–∞–º–∞–∑–∞, " +
      "–∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞—Å–±–∏—Ö.\n\n" +
      "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
    { parse_mode: "HTML", reply_markup: startKeyboard }
  );

  const { callbackQuery } = await conversation.waitFor("callback_query");
  if (callbackQuery.data === "next:location") {
    await ctx.api.answerCallbackQuery(callbackQuery.id, {
      text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞",
    });
    await ctx.api.deleteMessage(ctx_message.chat.id, ctx_message.message_id);
    await locationConversation(conversation, ctx);
  }
};

export const locationConversation = async (
  conversation: MyConversation,
  ctx: MyConversationContext
): Promise<void> => {
  await ctx.reply(
    "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:</b>\n\n" +
      "üèù –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –∞–∑–∫–∞—Ä—ã, " +
      "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.",
    { parse_mode: "HTML", reply_markup: locationKeyboard }
  );

  const { message } = await conversation.waitFor(":location");
  await ctx.reply("üìç", { reply_markup: { remove_keyboard: true } });

  if (!message?.location) {
    await ctx.reply(
      "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.",
      { parse_mode: "HTML" }
    );
    return;
  }

  const { latitude, longitude } = message.location;

  try {
    const prayTime: IPrayTime | null = await getPrayTime(
      latitude.toString(),
      longitude.toString()
    );

    if (!prayTime) {
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
      return;
    }

    const fajrLocal = dayjs
      .unix(prayTime.date.timestamp)
      .tz(prayTime.meta.timezone)
      .hour(Number(prayTime.timings.Fajr.split(":")[0]))
      .minute(Number(prayTime.timings.Fajr.split(":")[1]));

    const maghribLocal = dayjs
      .unix(prayTime.date.timestamp)
      .tz(prayTime.meta.timezone)
      .hour(Number(prayTime.timings.Maghrib.split(":")[0]))
      .minute(Number(prayTime.timings.Maghrib.split(":")[1]));

    const timingsUTC = {
      FajrUTC: fajrLocal.utc().toISOString(),
      MaghribUTC: maghribLocal.utc().toISOString(),
    };

    await User.findOneAndUpdate(
      { telegramId: ctx.from?.id },
      {
        $set: {
          "location.latitude": latitude.toString(),
          "location.longitude": longitude.toString(),
          "timings.FajrUTC": timingsUTC.FajrUTC,
          "timings.MaghribUTC": timingsUTC.MaghribUTC,
          date: prayTime.date,
          localTimings: prayTime.timings,
        },
      },
      { upsert: true, new: true }
    );

    await updatePrayerTimesAndSchedule();

    const ctx_message = await ctx.reply(
      `<b>üåû –í–∞—à–µ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ ${dayjs(
        prayTime.date.timestamp * 1000
      ).format("D MMMM YYYY")}</b>\n` +
        `üåÖ –§–∞–¥–∂—Ä ‚Äî ${prayTime.timings.Fajr}\n` +
        `üåÉ –ú–∞–≥—Ä–∏–± ‚Äî ${prayTime.timings.Maghrib}\n\n` +
        "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
      { parse_mode: "HTML", reply_markup: toMenuKeyboard }
    );

    const { callbackQuery, message } = await conversation.waitFor([
      "callback_query",
      "message",
    ]);

    if (callbackQuery) {
      if (callbackQuery.data === "menu") {
        await ctx.api.answerCallbackQuery(callbackQuery.id, {
          text: "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        });
        await ctx.api.deleteMessage(ctx.chat!.id, ctx_message.message_id);
        conversation.menu("menu");
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ locationConversation:", err);
    await ctx.reply(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
};
