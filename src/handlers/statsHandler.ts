import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import User from "../database/models/User";
import { MyContext } from "../types";
import { InlineKeyboard } from "grammy";
import { StreakService } from "../services/StreakService";
import { CalendarService } from "../services/CalendarService";
import { generateCalendarMarkup } from "../shared/calendarMarkup";

dayjs.extend(utc);

export async function statsHandler(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.reply(
        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
      );
      return;
    }

    const stats = await StreakService.getProfileStats(user._id);
    const statsMessage = formatProfileStats(stats);

    const now = dayjs.utc();
    const currentYear = now.year();
    const currentMonth = now.month() + 1;
    const calendar = await CalendarService.getMonthCalendar(user._id, currentYear, currentMonth); // —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ
    const keyboard = generateCalendarMarkup(calendar, currentYear, currentMonth);

    await ctx.reply(statsMessage, {
      reply_markup: keyboard,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ statsHandler:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
}

export async function handleCalendarNavigation(
  ctx: MyContext,
  year: number,
  month: number
): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.answerCallbackQuery(
        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );
      return;
    }

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    const calendar = await CalendarService.getMonthCalendar(
      user._id,
      year,
      month
    );
    const keyboard = generateCalendarMarkup(calendar, year, month);

    await ctx.editMessageText("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>", {
      reply_markup: keyboard,
      parse_mode: "HTML",
    });

    await ctx.answerCallbackQuery(`üìÖ ${getMonthName(month)} ${year}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ handleCalendarNavigation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
  }
}

function formatProfileStats(stats: {
  currentStreak: number;
  lastReadAt?: Date;
  totalReadDays: number;
  totalSkippedDays: number;
}): string {
  let message = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n";

  message += `üî• <b>–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫:</b> ${stats.currentStreak} –¥–Ω–µ–π\n\n`;

  if (stats.lastReadAt) {
    const lastRead = dayjs.utc(stats.lastReadAt).format("DD.MM.YYYY HH:mm");
    message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:</b> ${lastRead}\n\n`;
  } else {
    message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:</b> –ù–∏–∫–æ–≥–¥–∞\n\n`;
  }
  message += `‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–Ω–µ–π: ${stats.totalReadDays}\n`;
  message += `‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: ${stats.totalSkippedDays}\n`;

  return message;
}

function createCalendarKeyboard(year: number, month: number): InlineKeyboard {
  const keyboard = new InlineKeyboard();

  const prevMonth = month === 1 ? 12 : month - 1;
  const prevYear = month === 1 ? year - 1 : year;
  const nextMonth = month === 12 ? 1 : month + 1;
  const nextYear = month === 12 ? year + 1 : year;

  keyboard
    .text("‚è™", `calendar:${prevYear}:${prevMonth}`)
    .text(`${getMonthName(month)} ${year}`, `calendar:info`)
    .text("‚è©", `calendar:${nextYear}:${nextMonth}`)
    .row()
    .text("üìä –û–±–Ω–æ–≤–∏—Ç—å", `calendar:${year}:${month}`);

  return keyboard;
}

function getMonthName(month: number): string {
  const months = [
    "–Ø–Ω–≤–∞—Ä—å",
    "–§–µ–≤—Ä–∞–ª—å",
    "–ú–∞—Ä—Ç",
    "–ê–ø—Ä–µ–ª—å",
    "–ú–∞–π",
    "–ò—é–Ω—å",
    "–ò—é–ª—å",
    "–ê–≤–≥—É—Å—Ç",
    "–°–µ–Ω—Ç—è–±—Ä—å",
    "–û–∫—Ç—è–±—Ä—å",
    "–ù–æ—è–±—Ä—å",
    "–î–µ–∫–∞–±—Ä—å",
  ];
  return months[month - 1];
}
