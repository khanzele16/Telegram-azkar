import { MyContext } from "../types";
import { StreakService } from "../services/streakService";
import { CalendarService } from "../services/CalendarService";
import User from "../database/models/User";
import { InlineKeyboard } from "grammy";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";

dayjs.extend(utc);

export async function statsHandler(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    const stats = await StreakService.getProfileStats(user._id);
    
    const now = dayjs.utc();
    const currentYear = now.year();
    const currentMonth = now.month() + 1;
    const calendar = await CalendarService.getMonthCalendar(user._id, currentYear, currentMonth);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsMessage = formatProfileStats(stats);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    const calendarMessage = formatCalendar(calendar, currentYear, currentMonth);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    const keyboard = createCalendarKeyboard(currentYear, currentMonth);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    await ctx.reply(
      `${statsMessage}\n\n${calendarMessage}`,
      { 
        reply_markup: keyboard,
        parse_mode: "HTML" 
      }
    );
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ statsHandler:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
export async function handleCalendarNavigation(ctx: MyContext, year: number, month: number): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    const calendar = await CalendarService.getMonthCalendar(user._id, year, month);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    const calendarMessage = formatCalendar(calendar, year, month);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const keyboard = createCalendarKeyboard(year, month);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.editMessageText(
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n${calendarMessage}`,
      { 
        reply_markup: keyboard,
        parse_mode: "HTML" 
      }
    );
    
    await ctx.answerCallbackQuery(`üìÖ ${getMonthName(month)} ${year}`);
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ handleCalendarNavigation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function formatProfileStats(stats: {
  currentStreak: number;
  lastReadAt?: Date;
  totalReadDays: number;
  totalSkippedDays: number;
}): string {
  let message = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n";
  
  // –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
  message += `üî• <b>–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫:</b> ${stats.currentStreak} –¥–Ω–µ–π\n\n`;
  
  // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ
  if (stats.lastReadAt) {
    const lastRead = dayjs.utc(stats.lastReadAt).format("DD.MM.YYYY HH:mm");
    message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:</b> ${lastRead}\n\n`;
  } else {
    message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:</b> –ù–∏–∫–æ–≥–¥–∞\n\n`;
  }
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  message += `üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
  message += `   ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–Ω–µ–π: ${stats.totalReadDays}\n`;
  message += `   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: ${stats.totalSkippedDays}\n\n`;
  
  return message;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function formatCalendar(calendar: Array<{ date: string; status: string }>, year: number, month: number): string {
  let message = `<b>üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å ${getMonthName(month)} ${year}</b>\n\n`;
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
  const weeks: Array<Array<{ date: string; status: string }>> = [];
  let currentWeek: Array<{ date: string; status: string }> = [];
  
  calendar.forEach((day, index) => {
    currentWeek.push(day);
    
    // –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (–∏–Ω–¥–µ–∫—Å 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    const dayOfWeek = dayjs.utc(day.date).day();
    if (dayOfWeek === 0 || index === calendar.length - 1) { // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
      weeks.push([...currentWeek]);
      currentWeek = [];
    }
  });
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
  weeks.forEach((week, weekIndex) => {
    message += `–ù–µ–¥–µ–ª—è ${weekIndex + 1}:\n`;
    
    week.forEach(day => {
      const dayNumber = dayjs.utc(day.date).date();
      const statusEmoji = getStatusEmoji(day.status);
      message += `${statusEmoji} ${dayNumber.toString().padStart(2, '0')} `;
    });
    
    message += "\n\n";
  });
  
  return message;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function createCalendarKeyboard(year: number, month: number): InlineKeyboard {
  const keyboard = new InlineKeyboard();
  
  // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
  const prevMonth = month === 1 ? 12 : month - 1;
  const prevYear = month === 1 ? year - 1 : year;
  const nextMonth = month === 12 ? 1 : month + 1;
  const nextYear = month === 12 ? year + 1 : year;
  
  keyboard
    .text("‚è™", `calendar:${prevYear}:${prevMonth}`)
    .text(`${getMonthName(month)} ${year}`, `calendar:info`)
    .text("‚è©", `calendar:${nextYear}:${nextMonth}`)
    .row()
    .text("üìä –û–±–Ω–æ–≤–∏—Ç—å", `calendar:${year}:${month}`);
  
  return keyboard;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
function getMonthName(month: number): string {
  const months = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
  ];
  return months[month - 1];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status: string): string {
  switch (status) {
    case "read":
      return "‚úÖ";
    case "skipped":
      return "‚ùå";
    case "postponed":
      return "‚è∞";
    case "pending":
      return "‚è≥";
    default:
      return "‚ö™";
  }
} 